******************** MicroService Theory *********************** (Telusko)

-> break whole application into separate modules/services
-> instead of monolithic --> micro services
-> we need to scale entire application instead of single service. In case of Sale on Amazon, we need to scale some services like payment/search.
-> for monolithic we have to stick to only one technology e.g. Java. For micr service architecture we can create different services using different technologies
-> each services is individual, should deploy separatly, scaled separatly(one service we have 10 instance, and other can have 2 instances)
-> if any one service go down, it doesn't affect whole application

-> How different services communicate?
-> before going for micro services, need to design proper architecture of monolithic application to convert to micro services
-> security?


	======>  Project : Quiz Application

		Quiz (service)				Question (service)
		createQuiz					add
		get							remove
		getScore					update
									read
									

-> we will have separate DB for separate services
-> We need : API Gateway
			 Load Balancer
			 Service Registry
			 Failed Fast to manage if somthing went wrong
			 Circuit breacker
			 
-> once we create a service, we can create multiple instances of that service.
	Eclipse -> Run Configuration -> Java Application (as we are running springboot app in java app) -> create copy of existing config ->                          " -Dserver.port=8081 " -> apply
	
-> this way we can run another instance of a service on other port


==> to call one service from other : 
			1. we need url (e.g: http://localhost:8080/question/getScore)
			2. we can use RestTemplate to call -> but in case of multiple instances we have different ports and localhost
			
			==> openFeign/ Feign client is used to communicate between multiple services, we can call using service name
			==> we also need Service discovery to discover other service which we need to call, for that we ned a specific server => Eureka Server
			==> Eureka Server  => All services need to register themselves to this eureka server. so one service can search other from Eureka server using
			
==> Eureka client (http://localhost:8761/)
			==> create separate project for Eureka server and add @EnableEurekaServer annotation on main class .
				Also need to add in application.properties -> 
						spring.application.name = service-registry
						server.port = 8761
						eureka.instance.hostname=localhost
						eureka.client.fetch-registry=false
						eureka.client.register-with-eureka=false
			=> we can register the service to Eureka by adding Netflix Eureka client dependency in pom.xml	
			=> we can see all registered services under Instance registered with Eureka tab => if 2 instances, will show 2 instances here
			
==> Feign Client:

			==> Add dependency for Feign
			==> Annotate @FeignClients("service-name) on created Feign class
			==> @EnableFeignClient on main class
			==> 
			
==> Load Balancer
			==> As we can scale any service in multiple instances, then which instance to choose based on availability is done by Load balancer
			==> We have by default Load Balancer when we add dependency for spring cloud (i.e. Eureka)
			==> Feign Client will automatically do this load balance
			==> To test which service is running (i.e. if we have ran on different port), add Enviroment and print it with 
						=> sysout(environment.getProperty("local.server.port")

API Gateway:
			==> create new project for Gateway
			==> Multiple users (Web/mobile) are looking at application as a whole instead of multiple micro services
			==> So this is a single entry point for our application
			==> Gateway also has to register themself with Eureka client
			==> add dependency for Gateway
			==> API Gateway url : http://localhost:8765/quiz-service/quiz/allQuestions/1 (Here, 8765 is Gateway port, calling the Quiz service)
			
			
			
http://localhost:8080/question/allQuestions
http://localhost:8080/question/add
		
    {
        "id":1,
        "questionTitle": "Which java keyword is used to crate a subclass",
        "option1": "class",
        "option2": "interface",
        "option3": "extends",
        "option4": "implements",
        "rightAnswer":"extends",
        "difficultylevel":"easy",
        "category":"Java"
    }
			
			
http://localhost:8080/question/category/Java
http://localhost:8080/question/getQuestions
http://localhost:8080/question/category/SQL
http://localhost:8080/question/generate?categotyName=Java&numOfQues=2
http://localhost:8080/question/getScore

	[
    {
        "id":1,
        "response":"compareTo"
    },
    {
        "id":2,
        "response":"interface"
    },
    {
        "id":1,
        "response":"insert"
    }
]


http://localhost:8090/quiz/create
	
    {
        "categoryName":"Java",
        "numQuestions": 2,
        "title":"Quiz 1"
    }
http://localhost:8090/quiz/allQuestions/1

http://localhost:8090/quiz/submit/1
		
   [
    {
        "id":1,
        "response": "compareTo"
    },
    {
        "id":2,
        "response": "compaeTo"
    }
   ]
http://localhost:8765/quiz-service/quiz/allQuestions/1